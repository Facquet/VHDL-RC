<?xml version="1.0" encoding="UTF-8"?>
<hb:RuleSet xmlns:hb="HANDBOOK"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="HANDBOOK ../XSD/handbook.xsd ">

	<hb:Rule UID="CNE_01200">
		<hb:RuleUID>CNE_01200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2015-07-16</hb:Modified>
			<hb:Revision>
				V1 : 2014-09-30 : Creation
				V2 : 2014-12-01 : Status ; Name ; Rationale 
				V3 : 2015-02-17 : Technology
				V4 : 2015-07-16 : GoodExample ; BadExample ; GoodExDesc ; BadExDesc
			</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of process label</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating process label from other VHDL object improves readability.</hb:Rationale>
			<hb:ShortDesc>Process label name starts by a prefix: "P_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01200_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
			   <hb:ParamID>P1</hb:ParamID>
			   <hb:Position>Prefix</hb:Position>
			   <hb:Value>p_</hb:Value>
		   </hb:StringParam>
	   </hb:RuleParams>
	</hb:Rule>
	
		<hb:Rule UID="STD_00200">
		<hb:RuleUID>STD_00200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Active</hb:Status>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2017-11-24</hb:Modified>
			<hb:Revision>
				V1 : 2014-09-30 : Creation
				V2 : 2014-12-01 : Technology ; Rationale ; LongDesc
				V3 : 2015-02-17 : ShortDesc ; LongDesc ; FigureDesc
				V4 : 2015-07-16 : GoodExample ; GoodExDesc 
				V5 : 2017-11-24 : Sonarqube ; Status
			</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of clock signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The clock signal is critical. This signal needs to be easily found through the design.</hb:Rationale>
			<hb:ShortDesc>The clock signal name includes "clk" or "clock".</hb:ShortDesc>
			<hb:LongDesc>A signal is considered as a "CLOCK" whenever it is used to synchronize other signals to its rising or falling edge within a synchronous process with one of the following VHDL functions ('event, rising_edge or falling_edge), or when it is mapped on an IP clock input.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_00200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_00200_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure ></hb:Figure>
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clk</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P2</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clock</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_00300">
		<hb:RuleUID>STD_00300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Active</hb:Status>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2017-11-24</hb:Modified>
			<hb:Revision>
				V1 : 2014-09-30 : Creation
				V2 : 2014-12-01 : Technology ; Rationale ; LongDesc
				V3 : 2015-02-17 : ShortDesc ; FigureDesc
				V4 : 2015-07-16 : GoodExample ; GoodExDesc
				V5 : 2015-11-18 : LongDesc
				V6 : 2017-11-24 : Sonarqube ; Status
			</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of reset signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The reset signal is critical. This signal needs 
			to be easily found through the design.</hb:Rationale>
			<hb:ShortDesc>The reset signal name includes "rst", "reset" or "clr".</hb:ShortDesc>
			<hb:LongDesc>A signal is considered as a "RESET" whenever it is used inside a clocked-process to initialize signals value to a known state (most of the time zero) or mapped on a IP reset input.
If several reset signals are used, each reset is identified with a different name.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_00300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_00300_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>reset</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P2</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>rst</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P3</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clr</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
		<hb:Rule UID="STD_04600">
		<hb:RuleUID>STD_04600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Active</hb:Status>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2017-11-24</hb:Modified>
			<hb:Revision>
				V1 : 2014-09-30 : Creation
				V2 : 2015-02-17 : FigureDesc
				V3 : 2015-07-16 : Figure
				V4 : 2017-11-24 : Sonarqube ; Status
			</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock domain number in the design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Reducing the number of clock domain in a design is critical in order to keep the number of clock domain crossing resolutions to few manageable cases.
Doing so limits the chance for clock domain crossing design issues, limits the number of nets not covered with static timing analysis and simplifies greatly the synthesis scripts.
For those reasons, usage of a single clock domain is strongly recommended.</hb:Rationale>
			<hb:ShortDesc>One clock domain is used in the design.</hb:ShortDesc>
			<hb:LongDesc>The number of timing domain is reduced as far as reasonably possible : one single clock domain design is the target.
When a slower clock version is needed, use an enable signal instead of a derived clock to throttle the resulting clock rate.
When a faster clock version is needed, promote that faster clock as the single clock domain used if the design and or re-design consequences are not prohibitive prior to creating a derived clock domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure fileref="STD_04600.svg" height="450px"
				width="450px" />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>1</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_04700">
		<hb:RuleUID>STD_04700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Active</hb:Status>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2017-11-24</hb:Modified>
			<hb:Revision>
				V1 : 2014-09-30 : Creation
				V2 : 2014-12-01 : LongDesc
				V3 : 2015-02-17 : FigureDesc
				V4 : 2017-11-24 : Sonarqube ; Status
			</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of clock domains per modules</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Separating the clock domains in the design architecture greatly improves the clock domains identifications, the data flow understanding and most importantly allows fast tracing of the clock domain crossing signals that need special design and static timing analysis considerations while allowing better design reuse.</hb:Rationale>
			<hb:ShortDesc>Each module in the design handle only one clock.</hb:ShortDesc>
			<hb:LongDesc>Entity that is linked between entities can have several clocks at input but do not manage processes on those clocks.
The only module that can handle several clocks are the clock management module and the reset management module.
Other modules can include different clocks but the data exchange between them is done through the approved clock domain crossing module.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>1</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:RuleSetHist>
		<hb:Version>5</hb:Version>
		<hb:Creation>2014-09-30</hb:Creation>
		<hb:Modified>2017-11-24</hb:Modified>
		<hb:Revision>V1 : 2014-11-13 : Creation.
V2   : 2014-12-01 : Update of rules with remarks from partners about V1 revision, rules have been transferred to CNES handbook.
V3   : 2015-02-17 : Update of rules with remarks from partners about V2 revision
V4   : 2015-07-16 : Update of rules with examples
V4.1 : 2015-11-18 : Correct several data from remarks
V5   : 2017-11-24 : Creation of Sonarqube data and update of some status
		</hb:Revision>
	</hb:RuleSetHist>	
</hb:RuleSet>
